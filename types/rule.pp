type Fluffy::Rule = Struct[{
  order => Integer,
  Optional[chain] => String,
  Optional[table] => Enum["filter", "nat", "mangle", "raw", "security"],
  Optional[index] => Integer,
  Optional[action] => Enum['absent', 'ACCEPT', 'DROP', 'REJECT', 'QUEUE', 'RETURN', 'DNAT', 'SNAT', 'LOG', 'MASQUERADE', 'REDIRECT', 'MARK', 'TCPMSS'],
  Optional[jump] => String,
  Optional[negate_protocol] => Boolean,
  Optional[protocol] => Enum['absent','ip', 'tcp', 'udp', 'icmp', 'ipv6-icmp', 'esp', 'ah', 'vrrp', 'igmp', 'ipencap', 'ipv4', 'ipv6', 'ospf', 'gre', 'cbt', 'sctp', 'pim', 'all'],
  Optional[negate_icmp_type] => Boolean,
  Optional[icmp_type] => Enum['absent', 'any', 'echo-reply', 'echo-request'],
  Optional[negate_tcp_flags] => Boolean,
  Optional[tcp_flags] => String,
  Optional[negate_ctstate] => Boolean,
  Optional[ctstate] => Array[String],
  Optional[negate_state] => Boolean,
  Optional[state] => Array[String],
  Optional[negate_src_address_range] => Boolean,
  Optional[src_address_range] => Array[String],
  Optional[negate_dst_address_range] => Boolean,
  Optional[dst_address_range] => Array[String],
  Optional[negate_in_interface] => Boolean,
  Optional[in_interface] => String,
  Optional[negate_out_interface] => Boolean,
  Optional[out_interface] => String,
  Optional[negate_src_address] => Boolean,
  Optional[src_address] => Array[String],
  Optional[negate_dst_address] => Boolean,
  Optional[dst_address] => Array[String],
  Optional[negate_src_service] => Boolean,
  Optional[src_service] => Array[String],
  Optional[negate_dst_service] => Boolean,
  Optional[dst_service] => Array[String],
  Optional[reject_with] => Enum['present', 'icmp-net-unreachable','icmp-host-unreachable','icmp-port-unreachable','icmp-proto-unreachable','icmp-net-prohibited','icmp-host-prohibited', 'icmp-admin-prohibited'],
  Optional[set_mss] => Variant[Enum['absent'], Integer[1]],
  Optional[clamp_mss_to_pmtu] => Boolean,
  Optional[to_src] => String,
  Optional[to_dst] => String,
  Optional[limit] => String,
  Optional[limit_burst] => String,
  Optional[log_prefix] => String,
  Optional[log_level] => Enum['emerg', 'alert', 'crit', 'err', 'warning', 'notice', 'info', 'debug'],
  Optional[comment] => String,
  Optional[ensure] => Enum['present', 'absent']
}]
